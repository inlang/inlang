datasource db {
  provider = "postgresql"
  // localhost database.
  url      = "postgres://postgres:postgres@localhost:5432/postgres"
  //! production database
  // url      = env("PRODUCTION_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model organization {
  id            String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name          String
  projects      project[]
  admin_user_id String    @db.Uuid
  admin         user      @relation("admin", fields: [admin_user_id], references: [id])
  members       member[]
  created_at    DateTime  @default(now())
}

model user {
  id         String         @id @db.Uuid
  email      String         @unique
  admin_of   organization[] @relation("admin")
  member_of  member[]
  created_at DateTime       @default(now())
}

model member {
  organization_id String       @db.Uuid
  organization    organization @relation(fields: [organization_id], references: [id])
  user_id         String       @db.Uuid
  user            user         @relation(fields: [user_id], references: [id])

  @@id([organization_id, user_id])
}

model project {
  id                   String       @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  api_key              String       @unique
  name                 String
  organization_id      String       @db.Uuid
  organization         organization @relation(fields: [organization_id], references: [id])
  /// the default language must be included in `languages`
  default_language_iso iso_639_1
  keys                 key[]
  created_at           DateTime     @default(now())
  languages            language[]
}

model language {
  iso_code   iso_639_1
  project_id String    @db.Uuid
  project    project   @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@id([project_id, iso_code])
}

model key {
  id           Int           @id @default(autoincrement())
  project_id   String        @db.Uuid
  project      project       @relation(fields: [project_id], references: [id], onDelete: Cascade)
  /// The name of the key e.g. "example.hello"
  name         String
  description  String?
  translations translation[]
  created_at   DateTime      @default(now())
}

model translation {
  id           Int       @id @default(autoincrement())
  key_id       Int
  key          key       @relation(fields: [key_id], references: [id], onDelete: Cascade)
  language_iso iso_639_1
  is_reviewed  Boolean   @default(false)
  /// Contains the translation -> "Hallo Welt"
  text         String
  created_at   DateTime  @default(now())
}

enum iso_639_1 {
  ab
  aa
  af
  ak
  sq
  am
  ar
  an
  hy
  as
  av
  ae
  ay
  az
  bm
  ba
  eu
  be
  bn
  bh
  bi
  bs
  br
  bg
  my
  ca
  km
  ch
  ce
  ny
  zh
  cu
  cv
  kw
  co
  cr
  hr
  cs
  da
  dv
  nl
  dz
  en
  eo
  et
  ee
  fo
  fj
  fi
  fr
  ff
  gd
  gl
  lg
  ka
  de
  ki
  el
  kl
  gn
  gu
  ht
  ha
  he
  hz
  hi
  ho
  hu
  is
  io
  ig
  id
  ia
  ie
  iu
  ik
  ga
  it
  ja
  jv
  kn
  kr
  ks
  kk
  rw
  kv
  kg
  ko
  kj
  ku
  ky
  lo
  la
  lv
  lb
  li
  ln
  lt
  lu
  mk
  mg
  ms
  ml
  mt
  gv
  mi
  mr
  mh
  ro
  mn
  na
  nv
  nd
  ng
  ne
  se
  no
  nb
  nn
  ii
  oc
  oj
  or
  om
  os
  pi
  pa
  ps
  fa
  pl
  pt
  qu
  rm
  rn
  ru
  sm
  sg
  sa
  sc
  sr
  sn
  sd
  si
  sk
  sl
  so
  st
  nr
  es
  su
  sw
  ss
  sv
  tl
  ty
  tg
  ta
  tt
  te
  th
  bo
  ti
  to
  ts
  tn
  tr
  tk
  tw
  ug
  uk
  ur
  uz
  ve
  vi
  vo
  wa
  cy
  fy
  wo
  xh
  yi
  yo
  za
  zu
}

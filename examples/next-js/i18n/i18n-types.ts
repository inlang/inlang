// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */
import type { BaseTranslation as BaseTranslationType } from 'typesafe-i18n'
import type { LocalizedString } from 'typesafe-i18n'

export type BaseTranslation = BaseTranslationType
export type BaseLocale = 'en'

export type Locales =
	| 'de'
	| 'en'
	| 'fr'
	| 'nl'

export type Translation = {
	'index': {	
		/**
		 * Documentation
		 */
		'documentation': string
		/**
		 * "My name is {name} and my favorite color is {color}."
		 * @param {unknown} color
		 * @param {unknown} name
		 */
		'favoriteColor': RequiredParams2<'color', 'name'>
	}
	'hello': {	
		/**
		 * Get started by editing
		 */
		'world': string
	}
	'samuel': {	
		/**
		 * "2. Highlight the text you want to localize."
		 */
		'test': string
	}
	'myname': {	
		/**
		 * "2. Highlight the text you want to localize."
		 */
		'key': string
	}
	/**
	 * "My name is {name} and I have {numFingers} fingers."
	 * @param {unknown} name
	 * @param {unknown} numFingers
	 */
	'nameAndFingers': RequiredParams2<'name', 'numFingers'>
}

export type TranslationFunctions = {
	'index': {	
		/**
		 * Documentation
		 */
		'documentation': () => LocalizedString
		/**
		 * "My name is {name} and my favorite color is {color}."
		 */
		'favoriteColor': (arg: { color: unknown, name: unknown }) => LocalizedString
	}
	'hello': {	
		/**
		 * Get started by editing
		 */
		'world': () => LocalizedString
	}
	'samuel': {	
		/**
		 * "2. Highlight the text you want to localize."
		 */
		'test': () => LocalizedString
	}
	'myname': {	
		/**
		 * "2. Highlight the text you want to localize."
		 */
		'key': () => LocalizedString
	}
	/**
	 * "My name is {name} and I have {numFingers} fingers."
	 */
	'nameAndFingers': (arg: { name: unknown, numFingers: unknown }) => LocalizedString
}

export type Formatters = {}

type Param<P extends string> = `{${P}}`

type Params2<P1 extends string, P2 extends string> =
	`${string}${Param<P1>}${string}${Param<P2>}${string}`

type RequiredParams2<P1 extends string, P2 extends string> =
	| Params2<P1, P2>
	| Params2<P2, P1>
